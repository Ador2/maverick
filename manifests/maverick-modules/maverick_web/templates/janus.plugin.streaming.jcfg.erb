<% if @stream_type == "rtp" %>
h264-stream: {
        type = "rtp"
        id = 1
        description = "Maverick visiond video stream"
        is_private = false
        audio = false
        video = true
        videoport = <%= @rtp_stream_port %>
        videopt = 96
        videortpmap = "H264/90000"
        videobufferkf = true
        videofmtp = "profile-level-id=42e028;packetization-mode=1"
}
<% elsif  @stream_type == 'rtsp' %>
rtsp-stream: {
	type = "rtsp"
	id = 1
	description = "Maverick RTSP Source"
	audio = false
	video = true
        videopt = 96
        videortpmap = "H264/90000"
        videobufferkf = true
        videofmtp = "profile-level-id=42e028;packetization-mode=1"
        url = "rtsp://127.0.0.1:<%= @rtsp_stream_port %>/video"
        rtsp_failcheck = false
}
<% end %>

# This is a sample configuration for an RTSP stream: you can specify
# the url to connect to and whether or not authentication is needed
# using the url/rtsp_user/rtsp_pwd settings (but notice that digest
# authentication will only work if you installed libcurl >= 7.45.0)
# NOTE WELL: the plugin does NOT transcode, so the RTSP stream MUST be
# in a format the browser can digest (e.g., VP8 or H.264 baseline for video)
# Again, you can override payload type, rtpmap and/or fmtp, if needed
#
#rtsp-test: {
	#type = "rtsp"
	#id = 99
	#description = "RTSP Test"
	#audio = false
	#video = true
	#url = "rtsp://127.0.0.1:8554/unicast"
	#rtsp_user = "username"
	#rtsp_pwd = "password"
#}

# stream-name: {
# type = rtp|live|ondemand|rtsp
#        rtp = stream originated by an external tool (e.g., gstreamer or
#              ffmpeg) and sent to the plugin via RTP
#        live = local file streamed live to multiple listeners
#               (multiple listeners = same streaming context)
#        ondemand = local file streamed on-demand to a single listener
#                   (multiple listeners = different streaming contexts)
#        rtsp = stream originated by an external RTSP feed (only
#               available if libcurl support was compiled)
# id = <unique numeric ID> (if missing, a random one will be generated)
# description = This is my awesome stream
# is_private = true|false (private streams don't appear when you do a 'list'
#			request)
# filename = path to the local file to stream (only for live/ondemand)
# audio = true|false (do/don't stream audio)
# video = true|false (do/don't stream video)
#    The following options are only valid for the 'rtp' type:
# data = true|false (do/don't stream text via datachannels)
# videoport = local port for receiving video frames
# videopt = <video RTP payload type> (e.g., 100)
# videortpmap = RTP map of the video codec (e.g., VP8/90000)
# videobufferkf = true|false (whether the plugin should store the latest
#		keyframe and send it immediately for new viewers, EXPERIMENTAL)
# videosimulcast = true|false (do|don't enable video simulcasting)
# videoskew = true|false (whether the plugin should perform skew
#		analisys and compensation on incoming video RTP stream, EXPERIMENTAL)
# threads = number of threads to assist with the relaying part, which can help
#		if you expect a lot of viewers that may cause the RTP receiving part
#		in the Streaming plugin to slow down and fail to catch up (default=0)
#
# The following options are only valid for the 'rstp' type:
# url = RTSP stream URL (only for restreaming RTSP)
# rtsp_user = RTSP authorization username (only if type=rtsp)
# rtsp_pwd = RTSP authorization password (only if type=rtsp)
# rtspiface = network interface or IP address to bind to, if any (binds to all otherwise), when receiving RTSP streams
# rtsp_failcheck = whether an error should be returned if connecting to the RTSP server fails (default=true)
#
# Notice that, for 'rtsp' mountpoints, normally the plugin uses the exact
# SDP rtpmap and fmtp attributes the remote camera or RTSP server sent.
# In case the values set remotely are known to conflict with WebRTC viewers,
# you can override both using the settings introduced above.
